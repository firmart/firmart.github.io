<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Firmin Martin</title>
    <link>https://firminmartin.com/en/</link>
    <description>Recent content on Firmin Martin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <sy:updatePeriod>weekly</sy:updatePeriod>
    
        <atom:link href="https://firminmartin.com/en/index.xml" rel="self" type="application/rss+xml" />
    
      
      
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      

      
      <item>
        <title>Obtain emails header in notmuch</title>
        <link>https://firminmartin.com/en/posts/2021/03/obtain_emails_header_in_notmuch/</link>
        <pubDate>Wed, 03 Mar 2021 00:00:00 +0100</pubDate>
        
        <atom:modified>Wed, 03 Mar 2021 12:43:55 +0100</atom:modified>
        <guid>https://firminmartin.com/en/posts/2021/03/obtain_emails_header_in_notmuch/</guid>
        <description>Introduction It&amp;rsquo;s been half a month that I&amp;rsquo;m gradually writing an Emacs package for notmuch email notification. Although it works fine so far, it misses an important feature which consists to display the subject and the sender name on the notification instead of merely saying &amp;ldquo;2 new messages since last refresh&amp;rdquo;.
Fortunately, probably because the development of the notmuch Emacs frontend, notmuch can speak Lisp S-expression.
Notmuch show To retrieve header from emails, we need the command notmuch show.</description>
        
        <dc:creator>[Firmin Martin]</dc:creator>
        
        
        
        
          
            
              <category>notmuch</category>
            
          
            
              <category>email</category>
            
          
            
              <category>emacs-lisp</category>
            
          
            
              <category>emacs</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Breadth-first search grep</title>
        <link>https://firminmartin.com/en/posts/2021/03/bfs-grep/</link>
        <pubDate>Tue, 02 Mar 2021 00:00:00 +0100</pubDate>
        
        <atom:modified>Tue, 02 Mar 2021 09:47:43 +0100</atom:modified>
        <guid>https://firminmartin.com/en/posts/2021/03/bfs-grep/</guid>
        <description>Introduction From time to time, I want to search over my dotfiles, precisely those immediately under my home directory ~/. The problem of grep -R &amp;lt;regex&amp;gt; is that it quickly delves into an oceanic trench, full of caches, xml files or databases. In other words, it uses a depth-first approach.
bfs-grep The following shell function helps me greatly to deal with such a situation. It employs a breadth-first search, i.e. level by level.</description>
        
        <dc:creator>[Firmin Martin]</dc:creator>
        
        
        
        
          
            
              <category>cli</category>
            
          
            
              <category>shell</category>
            
          
            
              <category>linux</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>A tale of installing RT18812AU driver and make it works in VirtualBox</title>
        <link>https://firminmartin.com/en/posts/2021/03/a_tale_of_installing_rt18812au_driver_and_make_it_works_in_virtualbox/</link>
        <pubDate>Mon, 01 Mar 2021 00:00:00 +0100</pubDate>
        
        <atom:modified>Mon, 01 Mar 2021 15:48:37 +0100</atom:modified>
        <guid>https://firminmartin.com/en/posts/2021/03/a_tale_of_installing_rt18812au_driver_and_make_it_works_in_virtualbox/</guid>
        <description>Few days ago, I bought a USB Wi-Fi adapter to learn about pentesting. The goal was using this adapter to connect a virtual Kali Linux distribution in VirtualBox to Wi-Fi network through USB.
After some hesitations, I picked up a cheap enough model which uses a RT18812AU chip. An important factor to choose this chip is that it is dual-band. This was the first time I&amp;rsquo;m dealing with such material. Of course, there was no such thing as plug-and-play.</description>
        
        <dc:creator>[Firmin Martin]</dc:creator>
        
        
        
        
          
            
              <category>hardware</category>
            
          
            
              <category>driver</category>
            
          
            
              <category>virtualbox</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Rating images painlessly with exiftool feat. ranger &amp; sxiv</title>
        <link>https://firminmartin.com/en/posts/2020/12/rating_images_painlessly_with_exiftool/</link>
        <pubDate>Thu, 03 Dec 2020 00:00:00 +0100</pubDate>
        
        <atom:modified>Mon, 01 Mar 2021 09:47:12 +0100</atom:modified>
        <guid>https://firminmartin.com/en/posts/2020/12/rating_images_painlessly_with_exiftool/</guid>
        <description>Background I was looking for a way to classifying images by rating them on the fly. My first attempt was using darktable as suggested in a thread. Indeed, the auto-advance rating mechanism was quite handy. But it is still too heavy for this sole purpose. In darktable, user have to import images before editing metadata. When tens of thousands images are involved, the process of importing images can be quite time-consuming1 as it creates for each image an XMP file to store metadata.</description>
        
        <dc:creator>[Firmin Martin]</dc:creator>
        
        
        
        
          
            
              <category>linux</category>
            
          
            
              <category>ranger</category>
            
          
            
              <category>exiftool</category>
            
          
            
              <category>zsh</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Read and Compose Email in Emacs with Notmuch</title>
        <link>https://firminmartin.com/en/posts/2020/10/read_email_in_emacs_with_notmuch/</link>
        <pubDate>Sun, 04 Oct 2020 00:00:00 +0200</pubDate>
        
        <atom:modified>Mon, 01 Mar 2021 09:47:12 +0100</atom:modified>
        <guid>https://firminmartin.com/en/posts/2020/10/read_email_in_emacs_with_notmuch/</guid>
        <description>It has been 18 months that I read &amp;amp; write my emails in Emacs. No need to say I have enjoyed the mouse-free experience brought by Emacs. Recently, I had to keep track a new email account. So I came across my old note written back then which I enhanced in this post. I made lots of updates subsequently including password management through pass, multi-accounts support etc. to make it as complete as possible.</description>
        
        <dc:creator>[Firmin Martin]</dc:creator>
        
        
        
        
          
            
              <category>emacs</category>
            
          
            
              <category>notmuch</category>
            
          
            
              <category>email</category>
            
          
            
              <category>offlineimap</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Migrate from vimwiki to Org mode</title>
        <link>https://firminmartin.com/en/posts/2020/09/migrate_from_vimwiki_to_org-mode/</link>
        <pubDate>Sat, 12 Sep 2020 00:00:00 +0200</pubDate>
        
        <atom:modified>Mon, 01 Mar 2021 09:47:12 +0100</atom:modified>
        <guid>https://firminmartin.com/en/posts/2020/09/migrate_from_vimwiki_to_org-mode/</guid>
        <description>Around 2016-2017, I used vimwiki a lot to take spare notes of Linux, programming &amp;amp; mathematics related topics. I moved from Vim to Emacs in June 2019 for the great Org mode and never came back. Recently, I wanted to get rid of my good old vimwiki directory and merge it in my org-mode personal wiki (using org-glaux). Since it&amp;rsquo;s a one-time task, I decided to use the only available outdated script then write some Emacs code to fix the result instead of patching the old script.</description>
        
        <dc:creator>[Firmin Martin]</dc:creator>
        
        
        
        
          
            
              <category>vim</category>
            
          
            
              <category>emacs</category>
            
          
            
              <category>org-mode</category>
            
          
            
              <category>org-glaux</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Consult dictionaries in Emacs</title>
        <link>https://firminmartin.com/en/posts/2020/06/consult_dictionaries_in_emacs/</link>
        <pubDate>Tue, 09 Jun 2020 00:00:00 +0200</pubDate>
        
        <atom:modified>Mon, 01 Mar 2021 09:47:12 +0100</atom:modified>
        <guid>https://firminmartin.com/en/posts/2020/06/consult_dictionaries_in_emacs/</guid>
        <description>The most time-wasting thing when learning natural languages or reading literature works is nothing more than consulting a dictionary. During my studies, I came through three stages: paperback dictionary, online dictionary and Google Chrome search engines. The time requiring to consult one entry has decreased from a few minutes to dozens of seconds, but Iâ€™m still not satisfied with this speed.

  Figure 1: A Kangxi Dictionary. It was quite fascinating to read when I was a child.</description>
        
        <dc:creator>[Firmin Martin]</dc:creator>
        
        
        
        
          
            
              <category>emacs</category>
            
          
            
              <category>dictionary</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>