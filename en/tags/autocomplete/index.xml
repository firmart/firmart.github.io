<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>autocomplete on Firmin Martin</title>
    <link>https://firminmartin.com/en/tags/autocomplete/</link>
    <description>Recent content in autocomplete on Firmin Martin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>©2021, All Rights Reserved</copyright>
    <lastBuildDate>Thu, 20 May 2021 00:00:00 +0200</lastBuildDate>
    <sy:updatePeriod>weekly</sy:updatePeriod>
    
        <atom:link href="https://firminmartin.com/en/tags/autocomplete/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Git: autocomplete –trailer and –cc in zsh</title>
        <link>https://firminmartin.com/en/posts/2021/05/git_autocomplete_trailer_and_recipients_in_zsh/</link>
        <pubDate>Thu, 20 May 2021 00:00:00 +0200</pubDate>
        
        <atom:modified>Sat, 22 May 2021 16:03:38 +0200</atom:modified>
        <guid>https://firminmartin.com/en/posts/2021/05/git_autocomplete_trailer_and_recipients_in_zsh/</guid>
        <description>Introduction When working on a Git repository developped through email-based workflow (e.g. Git, Linux kernel, Emacs, notmuch etc.), it is often needed
 to git commit with the --trailer option to acknowledge people, and to git send-email with the --to &amp;amp; -cc options to indicate the recipients of the patch series to send.  Newcomers of such workflow, as me, would copy one by one the email addresses from git-log or the project mailing list at the beginning.</description>
        <content:encoded>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;When working on a Git repository developped through email-based workflow (&lt;em&gt;e.g.&lt;/em&gt;
Git, Linux kernel, Emacs, notmuch &lt;em&gt;etc.&lt;/em&gt;), it is often needed&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to &lt;code&gt;git commit&lt;/code&gt; with the &lt;code&gt;--trailer&lt;/code&gt; option to acknowledge people,&lt;/li&gt;
&lt;li&gt;and to &lt;code&gt;git send-email&lt;/code&gt; with the &lt;code&gt;--to&lt;/code&gt; &amp;amp; &lt;code&gt;-cc&lt;/code&gt; options to indicate the
recipients of the patch series to send.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Newcomers of such workflow, as me, would copy one by one the email addresses
from &lt;code&gt;git-log&lt;/code&gt; or the project mailing list at the beginning. But it becomes
quickly tiresome. The good news is that this process can be automatized with
&lt;code&gt;fzf&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt; (see the &lt;a href=&#34;#screencasts&#34;&gt;Screencasts&lt;/a&gt; section).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make a fake Git repository to illustrate how it works.  The following
snippet will create at most 1500 empty commits from 150 distinct developers.
It uses &lt;code&gt;rig&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; to create fake identities.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;nv&#34;&gt;DIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;~/tmp/Git_fzf/ mkdir -p &lt;span class=&#34;nv&#34;&gt;$DIR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$DIR&lt;/span&gt;
git init
rig -c &lt;span class=&#34;m&#34;&gt;150&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk -v &lt;span class=&#34;nv&#34;&gt;RS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\n\n&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print $1 &amp;#34; &amp;#34; $2}&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; name&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; i in &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;1..&lt;span class=&#34;k&#34;&gt;$((&lt;/span&gt; RANDOM &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
            git commit --author &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &amp;lt;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;// /.&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;@domain.com&amp;gt;&amp;#34;&lt;/span&gt; --allow-empty --allow-empty-message -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;a id=&#34;org6c6ada4&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://firminmartin.com/ox-hugo/fake_repository.gif&#34;
         alt=&#34;Figure 1: Creating a fake Git repository with distinct authors.&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Figure 1: Creating a fake Git repository with distinct authors.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;fetching-email-addresses-of-developers&#34;&gt;Fetching email addresses of developers&lt;/h2&gt;
&lt;p&gt;The following command returns all email addresses of the current Git
repository&amp;rsquo;s developers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;git shortlog -sne --all &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; cut -f2
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Breaking it down, we instruct &lt;code&gt;git shortlog&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to suppress commit descriptions (&lt;code&gt;-s&lt;/code&gt;),&lt;/li&gt;
&lt;li&gt;to sort the contributors by the number of commits (&lt;code&gt;-n&lt;/code&gt;),&lt;/li&gt;
&lt;li&gt;to provide contributors&#39; email (&lt;code&gt;-e&lt;/code&gt;),&lt;/li&gt;
&lt;li&gt;and to consider the developers of all branches (&lt;code&gt;--all&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Piping the result to &lt;code&gt;cut -f2&lt;/code&gt; helps us to get rid of the commits count.&lt;/p&gt;
&lt;h2 id=&#34;select-email-addresses&#34;&gt;Select email addresses&lt;/h2&gt;
&lt;p&gt;Now, we want to pick out some addresses we are interested in. This step requires
that the fuzzy filter &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; is installed.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s pretty simple: we just have to pipe the result of &lt;code&gt;git-shortlog&lt;/code&gt; to &lt;code&gt;fzf&lt;/code&gt; and
use the option &lt;code&gt;-m&lt;/code&gt; to enable multiple choices. The &lt;code&gt;--reverse&lt;/code&gt; option makes a
drop-down menu which I find less disruptive.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;git shortlog -sne --all &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; cut -f2 &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; fzf -m --reverse
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Now you can select/unselect emails with &lt;code&gt;TAB&lt;/code&gt; / &lt;code&gt;Shift+TAB&lt;/code&gt;. Once you
are done, press &lt;code&gt;RET&lt;/code&gt;. It will output the selected entries.&lt;/p&gt;
&lt;h2 id=&#34;select-git-commit-trailers-and-git-send-email-recipients-options&#34;&gt;Select &lt;code&gt;git-commit&lt;/code&gt; trailers and &lt;code&gt;git-send-email&lt;/code&gt; recipients options&lt;/h2&gt;
&lt;p&gt;We can also make a drop-down menu to select &lt;code&gt;git-commit&lt;/code&gt; trailers and
recipients options. Let&amp;rsquo;s wrap it in a function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;__fzf_git_trailer_and_option&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;- EOF | fzf --reverse
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;	--to=
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;	--bcc=
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;	--cc=
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;	--trailer Thanks-to:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;	--trailer Reviewed-by:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;	--trailer Reported-by:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;	--trailer Acked-by:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;	--trailer Tested-by:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;	--trailer Based-on-patch-by:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;	--trailer Mentored-by:
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;	EOF&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;detect-if-we-are-under-a-git-repository&#34;&gt;Detect if we are under a Git repository&lt;/h2&gt;
&lt;p&gt;The command &lt;code&gt;git rev-parse --is-inside-work-tree&lt;/code&gt; can tell whether we are under
a Git repository. Let&amp;rsquo;s enable autocompletion only in such situation. We wrap
this into a function which, given a selected trailer or option and potentially
multiple addresses, returns addresses prefixed by the selected trailer or
option.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;__fzf_git_authors&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;git rev-parse --is-inside-work-tree 2&amp;gt;/dev/null&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;trailer_or_option&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;__fzf_git_trailer_and_option&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
    git shortlog -sne --all &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; cut -f2 &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; fzf -m --reverse &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; item&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
                &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -n &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;trailer_or_option&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39; &amp;#34;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;bind-autocompletion-to-a-shortcut&#34;&gt;Bind autocompletion to a shortcut&lt;/h2&gt;
&lt;p&gt;So far, the result is outputted to the terminal, but we actually want that it
appends the current command line. So, we keep the content on the left of the
buffer and redisplay it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;fzf-git-authors&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;LBUFFER&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;LBUFFER&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;__fzf_git_authors&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
  zle redisplay
  &lt;span class=&#34;nb&#34;&gt;typeset&lt;/span&gt; -f zle-line-init &amp;gt;/dev/null &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; zle zle-line-init
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Finally, I bound that function to &lt;code&gt;Alt-E&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;zle     -N   fzf-git-authors
bindkey &lt;span class=&#34;s1&#34;&gt;&amp;#39;\ee&amp;#39;&lt;/span&gt; fzf-git-authors
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;screencasts&#34;&gt;Screencasts&lt;/h2&gt;
&lt;figure&gt;&lt;img src=&#34;https://firminmartin.com/ox-hugo/git_commit.gif&#34;
         alt=&#34;Figure 2: git-commit with --trailer autocompletion.&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Figure 2: &lt;code&gt;git-commit&lt;/code&gt; with &lt;code&gt;--trailer&lt;/code&gt; autocompletion.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;img src=&#34;https://firminmartin.com/ox-hugo/git_send_email.gif&#34;
         alt=&#34;Figure 3: git-send-email with recipients autocompletion.&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Figure 3: &lt;code&gt;git-send-email&lt;/code&gt; with recipients autocompletion.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;On Ubuntu, &lt;code&gt;sudo apt install rig&lt;/code&gt;.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content:encoded>
        <dc:creator>[Firmin Martin]</dc:creator>
        
        
        
        
          
            
              <category>zsh</category>
            
          
            
              <category>git</category>
            
          
            
              <category>fzf</category>
            
          
            
              <category>autocomplete</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>
