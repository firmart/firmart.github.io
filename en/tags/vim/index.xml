<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>vim on Firmin Martin</title>
    <link>https://firminmartin.com/en/tags/vim/</link>
    <description>Recent content in vim on Firmin Martin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Â©2021, All Rights Reserved</copyright>
    <lastBuildDate>Sat, 12 Sep 2020 00:00:00 +0200</lastBuildDate>
    <sy:updatePeriod>weekly</sy:updatePeriod>
    
        <atom:link href="https://firminmartin.com/en/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Migrate from vimwiki to Org mode</title>
        <link>https://firminmartin.com/en/posts/2020/09/migrate_from_vimwiki_to_org-mode/</link>
        <pubDate>Sat, 12 Sep 2020 00:00:00 +0200</pubDate>
        
        <atom:modified>Mon, 01 Mar 2021 09:47:12 +0100</atom:modified>
        <guid>https://firminmartin.com/en/posts/2020/09/migrate_from_vimwiki_to_org-mode/</guid>
        <description>Around 2016-2017, I used vimwiki a lot to take spare notes of Linux, programming &amp;amp; mathematics related topics. I moved from Vim to Emacs in June 2019 for the great Org mode and never came back. Recently, I wanted to get rid of my good old vimwiki directory and merge it in my org-mode personal wiki (using org-glaux). Since it&amp;rsquo;s a one-time task, I decided to use the only available outdated script then write some Emacs code to fix the result instead of patching the old script.</description>
        <content:encoded>&lt;p&gt;Around 2016-2017, I used vimwiki a lot to take spare notes of Linux, programming &amp;amp; mathematics related topics. I moved from Vim to Emacs in June 2019 for the great Org mode and never came back. Recently, I wanted to get rid of my good old vimwiki directory and merge it in my org-mode personal wiki (using &lt;a href=&#34;https://github.com/firmart/org-glaux&#34;&gt;org-glaux&lt;/a&gt;). Since it&amp;rsquo;s a one-time task, I decided to use the only available outdated script then write some Emacs code to fix the result instead of patching the old script.&lt;/p&gt;
&lt;h2 id=&#34;prelude-the-power-of-vimwiki2org&#34;&gt;Prelude: the power of vimwiki2org&lt;/h2&gt;
&lt;p&gt;I looked for a vimwiki/Org converter, and luckily found &lt;a href=&#34;https://github.com/fasheng/vimwiki2org&#34;&gt;a legacy Perl script&lt;/a&gt; (written 8 years ago). Well, it&amp;rsquo;s better than nothing. To install, as usual&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git clone https://github.com/fasheng/vimwiki2org
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; vimwiki2org
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;After tweaking available options a bit, I came up with this one-liner which outputs the whole vimwiki content into one single Org file &lt;code&gt;vimwiki.org&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vimwiki2org --no-ignore-lonely-header -L fix index.wiki &amp;gt; vimwiki.org
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The option &lt;code&gt;-L fix&lt;/code&gt; seems necessary to correctly detect subdirectories, such as &lt;code&gt;diary/diary.wiki&lt;/code&gt;. The option &lt;code&gt;--no-ignore-lonely-header&lt;/code&gt; was necessary to prevent some heading be commented out (for a good reason).&lt;/p&gt;
&lt;h2 id=&#34;interlude-reworking-the-remaining&#34;&gt;Interlude: reworking the remaining&lt;/h2&gt;
&lt;h3 id=&#34;fix-possible-encoding-issue&#34;&gt;Fix possible encoding issue&lt;/h3&gt;
&lt;p&gt;An issue I have encountered was the failure to display correctly Unicode. If you have this issue, it means that some characters in the buffer cannot be rendered properly with Unicode. In my case, I have had a &lt;code&gt;.png&lt;/code&gt; disguised as a vimwiki file output into &lt;code&gt;vimwiki.org&lt;/code&gt;. That messes up the forthcoming steps.&lt;/p&gt;
&lt;p&gt;If you are not sure, evaluate (&lt;code&gt;M-:&lt;/code&gt;) the following snippet on the &lt;code&gt;vimwiki.org&lt;/code&gt; buffer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;decode-coding-string&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;buffer-string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;ss&#34;&gt;&amp;#39;utf-8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;erase-buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Now, save &lt;code&gt;vimwiki.org&lt;/code&gt;. If there is a prompt asking you what encoding do you want to choose, then you should examine whether or not &lt;code&gt;vimwiki.org&lt;/code&gt; contains weird stuff.&lt;/p&gt;
&lt;h3 id=&#34;remove-vimwiki-toc&#34;&gt;Remove vimwiki TOC&lt;/h3&gt;
&lt;p&gt;Auto-generated TOC by vimwiki seems unnecessary since Org mode produce TOC when exporting. It&amp;rsquo;s better to remove them as they create unexportable links. Inspired from &lt;a href=&#34;https://emacs.stackexchange.com/a/38354/23697&#34;&gt;this snippet&lt;/a&gt;, the following snippet removes the content of headline named &lt;code&gt;Contents&lt;/code&gt; (&lt;em&gt;i.e.&lt;/em&gt; TOCs auto-generated by vimwiki).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;let*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org-element-parse-buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;progn&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org-element-map&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;headline&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;equal&lt;/span&gt;
                         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;car-safe&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org-element-property&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;:title&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                         &lt;span class=&#34;s&#34;&gt;&amp;#34;Contents&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;c1&#34;&gt;;; Here we remove the contents from this headline.&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;nthcdr&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org-element-interpret-data&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;erase-buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Then, a little &amp;ldquo;&lt;a href=&#34;https://github.com/emacs-evil/evil&#34;&gt;evil&lt;/a&gt;&amp;rdquo; regex &lt;code&gt;%g/Contents/d&lt;/code&gt; cleans up the remaining empty TOC
headlines.Â &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id=&#34;fix-headlines&#34;&gt;Fix headlines&lt;/h3&gt;
&lt;h4 id=&#34;fix-java-multiple-lines-comment&#34;&gt;Fix Java multiple lines comment&lt;/h4&gt;
&lt;p&gt;I had a converted Java source block containing multi-lines comment like this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;span class=&#34;c&#34;&gt;#+begin_src &lt;/span&gt;&lt;span class=&#34;cs&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Comment
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;* on
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;* multiple
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;* lines
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;********/&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#+end_src&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;vimwiki2org&lt;/code&gt; didn&amp;rsquo;t &lt;a href=&#34;https://orgmode.org/manual/Literal-Examples.html#Literal-Examples&#34;&gt;put a comma before asterisk&lt;/a&gt;, and that messes up Org mode headlines. I have luckily only one such case, so I corrected it manually.&lt;/p&gt;
&lt;h3 id=&#34;fix-source-block&#34;&gt;Fix source block&lt;/h3&gt;
&lt;p&gt;I had some source blocks not correctly handled. Apparently, it&amp;rsquo;s possible that source block failed to convert when the content is in the same line that &lt;code&gt;{{{&lt;/code&gt;. Fortunately, only one case hit me. Again, I fixed it manually, but it&amp;rsquo;s very easy to move one line down the content with regex.&lt;/p&gt;
&lt;h3 id=&#34;fix-markup&#34;&gt;Fix markup&lt;/h3&gt;
&lt;p&gt;You may notice that code markup (&lt;em&gt;i.e.&lt;/em&gt; &lt;code&gt;`...`&lt;/code&gt;) failed to convert properly. A quick evil regex do the job: &lt;code&gt;%s/`\(.*?\)`/~\1~/g&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;fix-mathematics-equation&#34;&gt;Fix mathematics equation&lt;/h3&gt;
&lt;p&gt;Well, &lt;a href=&#34;https://raw.githubusercontent.com/vimwiki/vimwiki/master/doc/vimwiki.txt&#34;&gt;vimwiki inline &amp;amp; display style maths&lt;/a&gt; are not converted at all. To be short,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{{$ ... }}$&lt;/code&gt; corresponds to inline maths &lt;code&gt;$ ... $&lt;/code&gt; ;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{{$%align% ... }}$&lt;/code&gt; corresponds to maths environment &lt;code&gt;\[$\begin{align} ... \end{align}$\]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And both of them can span on multiple lines.&lt;/p&gt;
&lt;p&gt;Evaluate the following evil regexps &lt;span class=&#34;underline&#34;&gt;in order&lt;/span&gt; fixes respectively the previous issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%s/{{\$%\(\w*\)%\(\(.\|\n\)*?\)}}\$/\\[\\begin{\1}\2\\end{\1}\\]/g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%s/{{\$\(\(.\|\n\)*?\)}}\$/\\[\1\\]/g&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;move-headline-content-in-org-files&#34;&gt;Move headline content in Org files&lt;/h3&gt;
&lt;p&gt;The last step is optional, but in my opinion is better to move headlines in separated
Org files as they was originally separated as vimwiki files.&lt;/p&gt;
&lt;h4 id=&#34;internal-link&#34;&gt;Fix internal links&lt;/h4&gt;
&lt;p&gt;We have to make link working again. Depending on whether you are using &lt;a href=&#34;https://github.com/firmart/org-glaux&#34;&gt;org-glaux&lt;/a&gt;, use one of the following evil regexps that suits you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Org mode file link: &lt;code&gt;%s/\[\[\(.*?\)\]\[\(.*?\)\]\]/[[file:\1.org][\2]]/g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;org-glaux&amp;rsquo;s wiki link: &lt;code&gt;%s/\[\[\(.*?\)\]\[\(.*?\)\]\]/[[wiki:../\1][\2]]/g&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;separate-contents-in-org-files&#34;&gt;Separate contents in Org files&lt;/h4&gt;
&lt;p&gt;If you have kept the outline of &lt;code&gt;vimwiki2org&lt;/code&gt; output, &lt;em&gt;i.e.&lt;/em&gt; each second-level headings corresponding to a vimwiki file, then the following snippet, inspired from &lt;a href=&#34;https://emacs.stackexchange.com/a/54944/23697&#34;&gt;this answer&lt;/a&gt;, will output the content of each second-level headline to a single Org file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-org-export-each-headline&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;&amp;amp;optional&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;scope&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;Export each second-level headline to an Org file with the title as filename.
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;If SCOPE is nil headlines in the current buffer are exported.
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;For other valid values for SCOPE see &lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;`org-map-entries&amp;#39;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;.
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;Already existing files are overwritten.&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;interactive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; Widen buffer temporarily as narrowing would affect the exporting.&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org-with-wide-buffer&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;save-mark-and-excursion&lt;/span&gt;
     &lt;span class=&#34;c1&#34;&gt;;; Loop through each headline.&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org-map-entries&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;;; Get the plain headline text without statistics and make filename.&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;equal&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org-current-level&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;let*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org-get-outline-path&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dir&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;file-name-directory&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;buffer-file-name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;concat&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dir&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;.org&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;;; Set the active region&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;set-mark&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org-forward-heading-same-level&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;activate-mark&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;buffer-substring&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;region-beginning&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;region-end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;;; Export the region&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;with-temp-buffer&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
              &lt;span class=&#34;c1&#34;&gt;;; Save the buffer to file and kill it.&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;write-file&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;kill-current-buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
      &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;scope&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;postlude-how-many-links-are-broken&#34;&gt;Postlude: how many links are broken ?&lt;/h2&gt;
&lt;p&gt;This little section is reserved for &lt;a href=&#34;https://github.com/firmart/org-glaux&#34;&gt;org-glaux&lt;/a&gt; users, of whom I am the only one (for now!). After all those steps, we want to make sure that all internal links are correctly interconnected. This is as simple as calling &lt;code&gt;M-x org-glaux-stats&lt;/code&gt;! That command produces a statistical overview of the current wiki including the number of broken links. As long as vimwiki files are under the same directories, no broken link is detected in my side. However, since we use relative links (see &lt;a href=&#34;#internal-link&#34;&gt;Fix internal links&lt;/a&gt;), they may be broken in the future as soon as they or their target Org files move. I plan to implement (not soon) a &amp;ldquo;safe move&amp;rdquo; feature inside &lt;a href=&#34;https://github.com/firmart/org-glaux&#34;&gt;org-glaux&lt;/a&gt; which preserves page&amp;rsquo;s link when page moves. But before that I should introduce caching (with &lt;em&gt;e.g.&lt;/em&gt; &lt;a href=&#34;https://github.com/l3kn/org-el-cache&#34;&gt;l3kn/org-el-cache&lt;/a&gt;) to annihilate links resolving overheads.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;There is probably a better solution with &lt;code&gt;org-element-map&lt;/code&gt;, but I&amp;rsquo;m not familiar enough with it.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content:encoded>
        <dc:creator>[Firmin Martin]</dc:creator>
        
        
        
        
          
            
              <category>vim</category>
            
          
            
              <category>emacs</category>
            
          
            
              <category>org-mode</category>
            
          
            
              <category>org-glaux</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>
